<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lilacrain</title>
    <link>https://lilacrainode.github.io/</link>
    <description>Recent content on lilacrain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 22 Jan 2020 13:35:54 +0800</lastBuildDate>
    
	<atom:link href="https://lilacrainode.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About_me</title>
      <link>https://lilacrainode.github.io/about_me/</link>
      <pubDate>Wed, 22 Jan 2020 13:35:54 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/about_me/</guid>
      <description>我太菜了，没啥好介绍的~等到我有点技术了再更新这个页面吧~😔</description>
    </item>
    
    <item>
      <title>Friends</title>
      <link>https://lilacrainode.github.io/friends/</link>
      <pubDate>Wed, 22 Jan 2020 13:29:27 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/friends/</guid>
      <description>fumeboy 大二学长，技协WEB部成员，感谢这位帅气学长教我怎么建博客~😊 ajil A佬，算法大神，打开他的博客就知道了。。</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://lilacrainode.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 21 Jan 2020 21:00:27 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>.* 默认为贪婪匹配，会匹配的结果尽量使一个字符串最长 .*? 为懒惰匹配，使匹配的结果最多(P29) ()里面的和后面的\1匹配的东西是一样的，如果()</description>
    </item>
    
    <item>
      <title>Mysql笔记</title>
      <link>https://lilacrainode.github.io/posts/mysql%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 21 Jan 2020 20:58:04 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/mysql%E7%AC%94%E8%AE%B0/</guid>
      <description>asc &amp;mdash;&amp;ndash; ascending order升序 desc &amp;mdash;&amp;ndash; descending order降序 set global interactive_timeout = 1000000;原来是120,为了防止长时间不使用之后断开连接，设置成了100000。 +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;-+ | Variable_name</description>
    </item>
    
    <item>
      <title>Php学习笔记</title>
      <link>https://lilacrainode.github.io/posts/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 21 Jan 2020 20:58:04 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>php没有创建变量的命令，变量会在首次为其赋值时被创建 函数以外的变量只能在函数之外访问，不能在函数之内访问，具有GLOBAL作用域 常量是自动</description>
    </item>
    
    <item>
      <title>哈曼夫树</title>
      <link>https://lilacrainode.github.io/posts/%E5%93%88%E6%9B%BC%E5%A4%AB%E6%A0%91/</link>
      <pubDate>Tue, 21 Jan 2020 20:57:16 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/%E5%93%88%E6%9B%BC%E5%A4%AB%E6%A0%91/</guid>
      <description>初始状态下有n个结点，将他们视座n棵只有一个结点的树 合并其中根节点最小的两棵树，这样树的总数就少了一颗 重复操作2，直到只剩下一棵树为止，这棵</description>
    </item>
    
    <item>
      <title>Html &amp; css笔记</title>
      <link>https://lilacrainode.github.io/posts/html-css%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 21 Jan 2020 20:56:13 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/html-css%E7%AC%94%E8%AE%B0/</guid>
      <description>html 空格要用&amp;amp;nbsp来表示，也可以用全角符号中的空格来表示 内联元素又名行内元素，内联元素的显示可以形象地成为文本模式，即一个埃一个，</description>
    </item>
    
    <item>
      <title>最长回文字符串</title>
      <link>https://lilacrainode.github.io/posts/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 21 Jan 2020 20:56:13 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>ULL get(ULL h[], int l, int r) { return h[r] - h[l - 1] * p[r - l + 1]; } 这个get函数有点难懂,举个例子这个字符串长度为5,是&amp;rdquo;abcde&amp;rdquo; 传入的</description>
    </item>
    
    <item>
      <title>二叉堆</title>
      <link>https://lilacrainode.github.io/posts/%E4%BA%8C%E5%8F%89%E5%A0%86/</link>
      <pubDate>Tue, 21 Jan 2020 20:56:10 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/%E4%BA%8C%E5%8F%89%E5%A0%86/</guid>
      <description>使用数组来存储二叉堆，第一个结点将存储于数组中的1号位，并且数组i号位表示的结点的左孩子就是2i号位，而右孩子则是(2i+1)号位,（（（日</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://lilacrainode.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Tue, 21 Jan 2020 20:54:58 +0800</pubDate>
      
      <guid>https://lilacrainode.github.io/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>count&amp;ndash;的话，是一进去就减了 算法笔记P343 好朋友代码 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; const int N = 110; int father[N]; bool isRoot[N]; void Union(int a,int b); void init(int n); int findFather(int x); int main() { int n, m; cin</description>
    </item>
    
  </channel>
</rss>